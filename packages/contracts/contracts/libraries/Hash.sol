pragma solidity >= 0.6.0;

import { Hasher } from "./Tree.sol";

library Poseidon3 {
    /**
     * @dev This is a dummy implementation for contract compilation
     * We'll use a generated library by circomlib instead of this dummy library
     * Please see
     * 1. migrations/3_deploy_poseidon.js
     * 2. https://github.com/iden3/circomlib/blob/master/src/poseidon_gencontract.js
     */
    function poseidon(uint256[] calldata) external pure returns(uint256) {
        return 0;
    }
}

library Poseidon6 {
    /**
     * @dev This is a dummy implementation for contract compilation
     * We'll use a generated library by circomlib instead of this dummy library
     * Please see
     * 1. migrations/3_deploy_poseidon.js
     * 2. https://github.com/iden3/circomlib/blob/master/src/poseidon_gencontract.js
     */
    function poseidon(uint256[] calldata) external pure returns(uint256) {
        return 0;
    }
}

library MiMC {
    /**
     * @dev This is a dummy implementation for contract compilation
     * We'll use a generated library by circomlib instead of this dummy library
     * Please see
     * 1. migrations/2_deploy_mimc.js
     * 2. https://github.com/iden3/circomlib/blob/master/src/mimcsponge_gencontract.js
     */
    function MiMCSponge(uint256 in_xL, uint256 in_xR, uint256 in_k) external pure returns (uint256 xL, uint256 xR) {
    }
}

/**
 * @dev This will be used to provide hash functions to calculate roll up.
 *      Please see RollUpLib.sol from 'merkle-tree-rollup'.
 */
library Hash {
    uint256 constant k =  21888242871839275222246405745257275088548364400416034343698204186575808495617;

    function poseidon() internal pure returns (Hasher memory) {
        return Hasher(poseidonParentOf, poseidonPrehashedZeroes());
    }

    /**
     * @dev Costs about 100k gas
     */
    function poseidonParentOf(uint256 left, uint256 right) internal pure returns (uint256) {
        uint256[] memory res = new uint256[](2);
        res[0] = left;
        res[1] = right;
        try Poseidon3.poseidon(res) returns (uint256 val) {
            return val;
        } catch {
            revert("poseidon hash error");
        }
    }

    function poseidonPrehashedZeroes() internal pure returns (uint256[] memory preHashed) {
        preHashed = new uint256[](49);
        preHashed[0] = 0;
        preHashed[1] = 10689077478637458878468078122604177599994736273794278078801473125437253970618;
        preHashed[2] = 17576059999322049606061839691393135290055001173295133652835316817738723155723;
        preHashed[3] = 14394399294781579537193120538513998701548992641570546815819359468683866192993;
        preHashed[4] = 10912008737682409653203114945639067991633976008052243085128825902624340861168;
        preHashed[5] = 9732737454380580329183904048440825860694023428282278695669419211114787948305;
        preHashed[6] = 15464895793651327944688608026231568151028127428198267598617758383655582163283;
        preHashed[7] = 14633004519223478016241938360603511574137178193641357011730869438104381176233;
        preHashed[8] = 6633293237192586491761472601286371658082923084150209560863117933230816897111;
        preHashed[9] = 1403962777258157686336011047110856458740519587815530786193452206743801448577;
        preHashed[10] = 13944491274051751625552702218653169459495092342548081057642485898514047997033;
        preHashed[11] = 7108792818474896522482112819968422687145778468739872103994552404066602083134;
        preHashed[12] = 21210756157863481393836841754092314251386137973444972185725366019889841757627;
        preHashed[13] = 8860700169902197520771595908079796376207109320506648029128829508916938227203;
        preHashed[14] = 11971941140269170684019918939305753158085693574373255157018210072640405391746;
        preHashed[15] = 5815179016408851394540862157979097748150202490127349292634897046107350602222;
        preHashed[16] = 8995746462075652506424875911056231830702511407611415891966227013690679970477;
        preHashed[17] = 18944400354233562926154088665361897321801961588440673140177398372676841207826;
        preHashed[18] = 15218491376025155717692102271775014280586885519506109475787365026617180024840;
        preHashed[19] = 2836001529096685711058003517613272619201476314423342665904661976745573846828;
        preHashed[20] = 361440555313133364062142746568445886995024275193498311260745163701612741247;
        preHashed[21] = 21080474937414888541832742670930262273651619647595663693779668304301408964765;
        preHashed[22] = 14965323551304231926472905167735143486658616301503506177422557712436438957795;
        preHashed[23] = 7417260826726950799664416637845013550829258920895984676907122060189715945401;
        preHashed[24] = 10188779943450036703013007463751994318554008945602231387798814792333922551116;
        preHashed[25] = 11282687385185551770873914830193898762017191203830454584455608348094579975945;
        preHashed[26] = 6001480939684889092676442146979430867515304826637385331009562933020006965741;
        preHashed[27] = 18385424805055766429747790088082540745855872407775231708848709653196782285276;
        preHashed[28] = 19457680442588488928051513717605150444002466012710352412177639182982539861385;
        preHashed[29] = 12334925775101114327286643430495647463636697542679632238987556432000968461135;
        preHashed[30] = 6841546132780698576381135602877181100599246471765578685788423006538048199600;
        preHashed[31] = 499047235443700055731937684367360377495456587204371641983871998332540894501;
        preHashed[32] = 12150757221073721047071269561047295508066558376628213199349722243893378106196;
        preHashed[33] = 12732477924374898813838632978258880508438863416621099647399310463097892845674;
        preHashed[34] = 5997377567932598266405982166923447610714907408757398516855756180408667905381;
        preHashed[35] = 8847736255232153940998671759853962347493307472583402748360795796005170617636;
        preHashed[36] = 36197488869396936315382998674807041794565358146026706370829941278660432316;
        preHashed[37] = 17235016191146340240380128628973588523649804817044644569351357292137553709523;
        preHashed[38] = 2161233161977262130585832326532349930226919796090458942211576809674021779515;
        preHashed[39] = 4609228213047403887937660106509126091618927487370654141775819445423606762027;
        preHashed[40] = 11386370156572215408198470525314966953139788273285349588137496123782586164982;
        preHashed[41] = 13706624973644609320044555811153843543536362350112985265276651897168164569078;
        preHashed[42] = 8816144415507762687669584687840665133334100779181788944496354359923854841534;
        preHashed[43] = 20818744856834738665757872727997461891331458670483628614456760602822538837959;
        preHashed[44] = 884639128837946362490350710759992060550743521840841625582695378758308640133;
        preHashed[45] = 10631498004018631344779897573116951813876197359741328468155823718899802834838;
        preHashed[46] = 19712844264479752199579544954630109003912017172585294774707661283702707015736;
        preHashed[47] = 7117158677482211912274232208414799443566381902392947339262618838481966616979;
        preHashed[48] = 11205089821440206019171377493269036172062892441730588059066628642448189179495;
    }

    function keccak() internal pure returns (Hasher memory) {
        return Hasher(keccakParentOf, keccakPrehashedZeroes());
    }

    function keccakParentOf(uint256 left, uint256 right) internal pure returns (uint256) {
        return uint256(keccak256(abi.encodePacked(left, right)));
    }

    function keccakPrehashedZeroes() internal pure returns (uint256[] memory preHashed) {
        preHashed = new uint256[](49);
        preHashed[0] = 0x0000000000000000000000000000000000000000000000000000000000000000;
        preHashed[1] = 0xad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5;
        preHashed[2] = 0xb4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30;
        preHashed[3] = 0x21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85;
        preHashed[4] = 0xe58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344;
        preHashed[5] = 0x0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d;
        preHashed[6] = 0x887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968;
        preHashed[7] = 0xffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83;
        preHashed[8] = 0x9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af;
        preHashed[9] = 0xcefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0;
        preHashed[10] = 0xf9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5;
        preHashed[11] = 0xf8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892;
        preHashed[12] = 0x3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c;
        preHashed[13] = 0xc1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb;
        preHashed[14] = 0x5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc;
        preHashed[15] = 0xda7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2;
        preHashed[16] = 0x2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f;
        preHashed[17] = 0xe1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a;
        preHashed[18] = 0x5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0;
        preHashed[19] = 0xb46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0;
        preHashed[20] = 0xc65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2;
        preHashed[21] = 0xf4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9;
        preHashed[22] = 0x5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377;
        preHashed[23] = 0x4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652;
        preHashed[24] = 0xcdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef;
        preHashed[25] = 0x0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d;
        preHashed[26] = 0xb8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0;
        preHashed[27] = 0x838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e;
        preHashed[28] = 0x662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e;
        preHashed[29] = 0x388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322;
        preHashed[30] = 0x93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735;
        preHashed[31] = 0x8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9;
        preHashed[32] = 0x27ae5ba08d7291c96c8cbddcc148bf48a6d68c7974b94356f53754ef6171d757;
        preHashed[33] = 0xbf558bebd2ceec7f3c5dce04a4782f88c2c6036ae78ee206d0bc5289d20461a2;
        preHashed[34] = 0xe21908c2968c0699040a6fd866a577a99a9d2ec88745c815fd4a472c789244da;
        preHashed[35] = 0xae824d72ddc272aab68a8c3022e36f10454437c1886f3ff9927b64f232df414f;
        preHashed[36] = 0x27e429a4bef3083bc31a671d046ea5c1f5b8c3094d72868d9dfdc12c7334ac5f;
        preHashed[37] = 0x743cc5c365a9a6a15c1f240ac25880c7a9d1de290696cb766074a1d83d927816;
        preHashed[38] = 0x4adcf616c3bfabf63999a01966c998b7bb572774035a63ead49da73b5987f347;
        preHashed[39] = 0x75786645d0c5dd7c04a2f8a75dcae085213652f5bce3ea8b9b9bedd1cab3c5e9;
        preHashed[40] = 0xb88b152c9b8a7b79637d35911848b0c41e7cc7cca2ab4fe9a15f9c38bb4bb939;
        preHashed[41] = 0x0c4e2d8ce834ffd7a6cd85d7113d4521abb857774845c4291e6f6d010d97e318;
        preHashed[42] = 0x5bc799d83e3bb31501b3da786680df30fbc18eb41cbce611e8c0e9c72f69571c;
        preHashed[43] = 0xa10d3ef857d04d9c03ead7c6317d797a090fa1271ad9c7addfbcb412e9643d4f;
        preHashed[44] = 0xb33b1809c42623f474055fa9400a2027a7a885c8dfa4efe20666b4ee27d7529c;
        preHashed[45] = 0x134d7f28d53f175f6bf4b62faa2110d5b76f0f770c15e628181c1fcc18f970a9;
        preHashed[46] = 0xc34d24b2fc8c50ca9c07a7156ef4e5ff4bdf002eda0b11c1d359d0b59a546807;
        preHashed[47] = 0x04dbb9db631457879b27e0dfdbe50158fd9cf9b4cf77605c4ac4c95bd65fc9f6;
        preHashed[48] = 0xf9295a686647cb999090819cda700820c282c613cedcd218540bbc6f37b01c65;
    }

    /**
     * We use poseidon, instead of MiMC because it is cheaper in SNARKs, 
     * FYI, MiMC hash is cheaper on EVM(~22000gas) & able ot use 6 depth of the sub tree.
    function mimc() internal pure returns (Hasher memory) {
        return Hasher(mimcParentOf, mimcPrehashedZeroes());
    }

    function mimcHash(uint256[] memory inputs) internal pure returns (uint256) {
        uint256 R = 0;
        uint256 C = 0;

        for (uint256 i = 0; i < inputs.length; i++) {
            R = addmod(R, inputs[i], k);
            (R, C) = MiMC.MiMCSponge(R, C, 0);
        }
        return R;
    }

    function mimcParentOf(uint256 left, uint256 right) internal pure returns (uint256) {
        uint256 R = 0;
        uint256 C = 0;

        R = addmod(R, left, k);
        (R, C) = MiMC.MiMCSponge(R, C, 0);

        R = addmod(R, right, k);
        (R, C) = MiMC.MiMCSponge(R, C, 0);

        return R;
    }

    function mimcPrehashedZeroes() internal pure returns (uint256[] memory preHashed) {
        preHashed = new uint256[](32);
        preHashed[0] = 0;
        preHashed[1] = 20636625426020718969131298365984859231982649550971729229988535915544421356929;
        preHashed[2] = 8234632431858659206959486870703726442454087730228411315786216865106603625166;
        preHashed[3] = 7985001422402102077350925203503698316627789269711557462970266825665867053007;
        preHashed[4] = 18097266179879782427361438755277450939722755112152115227098348943187633376449;
        preHashed[5] = 17881168164677037514367869548776650520965052851469330112398906502158797604517;
        preHashed[6] = 922786292280634969147910688433687283453311471541485803183285293828322638602;
        preHashed[7] = 14966121255901869775959970702197500594950233358407635238140938902275743163839;
        preHashed[8] = 15950129931660381885541753302118095863142450307256106174572389060872212753325;
        preHashed[9] = 16464761340879542328718857346548831929741065470370013028703745046966789709133;
        preHashed[10] = 11972762318876148250598407171878031197622371246897016172503915308401213732056;
        preHashed[11] = 7913827324380002912938758147218110935918449588532059556694800104640909434031;
        preHashed[12] = 14201520385210729827116219584168613816702847828183492080736088918213644443332;
        preHashed[13] = 19029732785687608713409092674238273944769768778346177735601630846367663862230;
        preHashed[14] = 9765633014970032282883326548708085452828117842858057778809593961683652391199;
        preHashed[15] = 9184608079226899602988566046323093647302956568088945904343867790799636834536;
        preHashed[16] = 11972349427600729437586536522854878181067516905509141792053080533995039240745;
        preHashed[17] = 10394791637867481933492192273905206106132537050796826353952753436720278057277;
        preHashed[18] = 21603873164014736077455707301636180846390167331483347051143483563452635839188;
        preHashed[19] = 10702670482623275757618147033467511205224846353145369471471007524354211067453;
        preHashed[20] = 15861152665456129634282768916620638578537083483837606944866798857777821896920;
        preHashed[21] = 20498343842312919518012756000146570792846156269878679339031468414543426339604;
        preHashed[22] = 1830896951362318606259478024712157567812426156885361939285043189241513771542;
        preHashed[23] = 19593719479653527472481203317703616094885816284937720002104363542485933650238;
        preHashed[24] = 4400797949327175975924960109125282147819957262566898155662911307280024014954;
        preHashed[25] = 12110156141937099244315908177282106282668918440691683058499110829441835163334;
        preHashed[26] = 9078765299217261770649815856048748276723416702111447408964712367427337145876;
        preHashed[27] = 7562744990849102147449876072614349025641829560411500310719361613167782076730;
        preHashed[28] = 21038753574403875854879370369349092756264613161113435884488912185237116714302;
        preHashed[29] = 18173414435841866346435646879016412700973102443995503160340118818770908449021;
        preHashed[30] = 1684117701874574052474687836292170148751601456481610409096174606023255461470;
        preHashed[31] = 15545313534057078925780542540989871893874743830293027221182247788840178762050;
    }
     */
}
