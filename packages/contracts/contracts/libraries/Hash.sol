// SPDX-License-Identifier: GPL-3.0-or-later
pragma solidity = 0.6.12;

import { Hasher } from "./MerkleTree.sol";

library Poseidon2 {
    /**
     * @dev This is a dummy implementation for contract compilation
     * We'll use a generated library by circomlib instead of this dummy library
     * Please see
     * 1. migrations/3_deploy_poseidon.js
     * 2. https://github.com/iden3/circomlib/blob/master/src/poseidon_gencontract.js
     */
    function poseidon(uint256[] calldata) external pure returns(uint256) {
        return 0;
    }
}

library Poseidon3 {
    /**
     * @dev This is a dummy implementation for contract compilation
     * We'll use a generated library by circomlib instead of this dummy library
     * Please see
     * 1. migrations/3_deploy_poseidon.js
     * 2. https://github.com/iden3/circomlib/blob/master/src/poseidon_gencontract.js
     */
    function poseidon(uint256[] calldata) external pure returns(uint256) {
        return 0;
    }
}

library Poseidon4 {
    /**
     * @dev This is a dummy implementation for contract compilation
     * We'll use a generated library by circomlib instead of this dummy library
     * Please see
     * 1. migrations/3_deploy_poseidon.js
     * 2. https://github.com/iden3/circomlib/blob/master/src/poseidon_gencontract.js
     */
    function poseidon(uint256[] calldata) external pure returns(uint256) {
        return 0;
    }
}

/**
 * @dev This will be used to provide hash functions to calculate roll up.
 *      Please see MerkleTreeLib.sol from 'merkle-tree-rollup'.
 */
library Hash {
    uint256 constant k =  21888242871839275222246405745257275088548364400416034343698204186575808495617;

    function poseidon() internal pure returns (Hasher memory) {
        return Hasher(poseidonParentOf, poseidonPrehashedZeroes());
    }

    /**
     * @dev Costs about 100k gas
     */
    function poseidonParentOf(uint256 left, uint256 right) internal pure returns (uint256) {
        uint256[] memory res = new uint256[](2);
        res[0] = left;
        res[1] = right;
        try Poseidon2.poseidon(res) returns (uint256 val) {
            return val;
        } catch {
            revert("poseidon hash error");
        }
    }

    function poseidonPrehashedZeroes() internal pure returns (uint256[] memory preHashed) {
        preHashed = new uint256[](49);
        preHashed[0] = 0;
        preHashed[1] = 10600974484483636649191836183331859514454108476826376357941356292578099372400;
        preHashed[2] = 21794476778427377126059366449788686607895945400675042941280102093665559598175;
        preHashed[3] = 2436929412409273971247897342963836206109725384909989018993604443786196167079;
        preHashed[4] = 16795971212351522389263710863137077078214825169846509011929499600964499735050;
        preHashed[5] = 13219681652802262400226541382497744859725228879557499223706656560508858332284;
        preHashed[6] = 16077415043335295839603287133858682446972083000831421492129903860562380669637;
        preHashed[7] = 502327552794018830492963939468986095778588873732395241302862672501374866469;
        preHashed[8] = 17316932530822847310778297511893782089230531647975443264466851693705942399213;
        preHashed[9] = 15616967174077889152093898696441462010235212806608416549656188924405260247520;
        preHashed[10] = 12190821404971533019165426092513461076028437957291902632838999055821897583490;
        preHashed[11] = 16555028449797792480572832506992372535201158677714945803879012251354763331859;
        preHashed[12] = 8231705230240651230537572725530833127444944283000004623928536619628228934194;
        preHashed[13] = 3077550723437915419104207012579575734231701844853976167144530179212424050931;
        preHashed[14] = 21763696456923873365073754080645198026461423046360831704057969664583515901721;
        preHashed[15] = 67141086259845765994826791686185563664511508469575310323320621339898305036;
        preHashed[16] = 3624208598265904886738968685803615152975472463538997991139575048534610424717;
        preHashed[17] = 8676144851288185870896103351878389773782247068899092359631289704737412042232;
        preHashed[18] = 13238330640648007528634160449350536125916169295342140059757257691192126867979;
        preHashed[19] = 7629979400019171337168423414609244365318871324132477886392009656933248919644;
        preHashed[20] = 17216708267491716820765977769753349546409338100471140224707568935140015239541;
        preHashed[21] = 11032037682276971475370797274652951818817419346055678538386520770346150554858;
        preHashed[22] = 10513188655612264610639309345357023572819674417089822243543789426195372519458;
        preHashed[23] = 20830246484199144121270459776609618477426103665100784158598304005532171231316;
        preHashed[24] = 14643959052806370295783622182926307921956713992546430641832487667576487046071;
        preHashed[25] = 12119291572639831440678081618795940194258648574679550148918006799979881284464;
        preHashed[26] = 13750563915408596218593142901395486535832472899236176573304451439811156557055;
        preHashed[27] = 12907606178576131793702229776336195584587379579829260210095886803937822938528;
        preHashed[28] = 13566176060365945107460500823464340046804824004704104386373703757946826255443;
        preHashed[29] = 3009017506736485220239996395726299306996097787311048019632232229030423680587;
        preHashed[30] = 21724845982339994137711944825542880106108735522617894947541637950424101339449;
        preHashed[31] = 60386645284463199583445465572728164220538858039953884251650918083929763515;
        preHashed[32] = 1592711413674761513405971810003404198688350605293799559384385405041395766194;
        preHashed[33] = 14301516436643055045149109088855694557420746657725164659766413999811862291456;
        preHashed[34] = 15921849220790204754735378712104286100899979049583142302521522792105492783919;
        preHashed[35] = 731934832871647620741636264208684467123503262905121663067794120328092378570;
        preHashed[36] = 18594386615908007655786955006792973928646499172983204159345011756342104179726;
        preHashed[37] = 21403312021111361442177462312539794489440477815302791844841091759479516900086;
        preHashed[38] = 17895432372310760551979403007617520876638797221531830301793148922789216157001;
        preHashed[39] = 4046320522306284054744909476688821930829401455132175453981105518049156544596;
        preHashed[40] = 21308652235294521203949455324101573347326725563669617684423526382035190882040;
        preHashed[41] = 9307558633100119005416786313499541804276667918366544329554442874107210818008;
        preHashed[42] = 12096189432791920614550311407338568058300637088225040717271755202689760990069;
        preHashed[43] = 19823437509870604295178309989523899027391648832731860668528138144905229555596;
        preHashed[44] = 6964798124447762099265638561733651799459494941130544021880669315667107478958;
        preHashed[45] = 7270233836638236002899669836456396743979691360169767700191498626702755802269;
        preHashed[46] = 1740310102929396229334577845559329925566414851949444893300244205344733658171;
        preHashed[47] = 9023345516637064449644297334443052792369346575394200069833851209363060173178;
        preHashed[48] = 3092784425575682849215806387188191163008086618667633588848126820278484295451;
    }

    function keccak() internal pure returns (Hasher memory) {
        return Hasher(keccakParentOf, keccakPrehashedZeroes());
    }

    function keccakParentOf(uint256 left, uint256 right) internal pure returns (uint256) {
        return uint256(keccak256(abi.encodePacked(left, right)));
    }

    function keccakPrehashedZeroes() internal pure returns (uint256[] memory preHashed) {
        preHashed = new uint256[](49);
        preHashed[0] = 0x0000000000000000000000000000000000000000000000000000000000000000;
        preHashed[1] = 0xad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5;
        preHashed[2] = 0xb4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30;
        preHashed[3] = 0x21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85;
        preHashed[4] = 0xe58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344;
        preHashed[5] = 0x0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d;
        preHashed[6] = 0x887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968;
        preHashed[7] = 0xffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83;
        preHashed[8] = 0x9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af;
        preHashed[9] = 0xcefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0;
        preHashed[10] = 0xf9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5;
        preHashed[11] = 0xf8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892;
        preHashed[12] = 0x3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c;
        preHashed[13] = 0xc1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb;
        preHashed[14] = 0x5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc;
        preHashed[15] = 0xda7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2;
        preHashed[16] = 0x2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f;
        preHashed[17] = 0xe1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a;
        preHashed[18] = 0x5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0;
        preHashed[19] = 0xb46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0;
        preHashed[20] = 0xc65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2;
        preHashed[21] = 0xf4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9;
        preHashed[22] = 0x5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377;
        preHashed[23] = 0x4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652;
        preHashed[24] = 0xcdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef;
        preHashed[25] = 0x0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d;
        preHashed[26] = 0xb8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0;
        preHashed[27] = 0x838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e;
        preHashed[28] = 0x662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e;
        preHashed[29] = 0x388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322;
        preHashed[30] = 0x93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735;
        preHashed[31] = 0x8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9;
        preHashed[32] = 0x27ae5ba08d7291c96c8cbddcc148bf48a6d68c7974b94356f53754ef6171d757;
        preHashed[33] = 0xbf558bebd2ceec7f3c5dce04a4782f88c2c6036ae78ee206d0bc5289d20461a2;
        preHashed[34] = 0xe21908c2968c0699040a6fd866a577a99a9d2ec88745c815fd4a472c789244da;
        preHashed[35] = 0xae824d72ddc272aab68a8c3022e36f10454437c1886f3ff9927b64f232df414f;
        preHashed[36] = 0x27e429a4bef3083bc31a671d046ea5c1f5b8c3094d72868d9dfdc12c7334ac5f;
        preHashed[37] = 0x743cc5c365a9a6a15c1f240ac25880c7a9d1de290696cb766074a1d83d927816;
        preHashed[38] = 0x4adcf616c3bfabf63999a01966c998b7bb572774035a63ead49da73b5987f347;
        preHashed[39] = 0x75786645d0c5dd7c04a2f8a75dcae085213652f5bce3ea8b9b9bedd1cab3c5e9;
        preHashed[40] = 0xb88b152c9b8a7b79637d35911848b0c41e7cc7cca2ab4fe9a15f9c38bb4bb939;
        preHashed[41] = 0x0c4e2d8ce834ffd7a6cd85d7113d4521abb857774845c4291e6f6d010d97e318;
        preHashed[42] = 0x5bc799d83e3bb31501b3da786680df30fbc18eb41cbce611e8c0e9c72f69571c;
        preHashed[43] = 0xa10d3ef857d04d9c03ead7c6317d797a090fa1271ad9c7addfbcb412e9643d4f;
        preHashed[44] = 0xb33b1809c42623f474055fa9400a2027a7a885c8dfa4efe20666b4ee27d7529c;
        preHashed[45] = 0x134d7f28d53f175f6bf4b62faa2110d5b76f0f770c15e628181c1fcc18f970a9;
        preHashed[46] = 0xc34d24b2fc8c50ca9c07a7156ef4e5ff4bdf002eda0b11c1d359d0b59a546807;
        preHashed[47] = 0x04dbb9db631457879b27e0dfdbe50158fd9cf9b4cf77605c4ac4c95bd65fc9f6;
        preHashed[48] = 0xf9295a686647cb999090819cda700820c282c613cedcd218540bbc6f37b01c65;
    }
}
