/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js'
import { Contract, ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import { ContractEvent, Callback, TransactionObject, BlockType } from './types'

interface EventOptions {
  filter?: object
  fromBlock?: BlockType
  topics?: string[]
}

export class MigrationChallenge extends Contract {
  constructor(jsonInterface: any[], address?: string, options?: ContractOptions)

  clone(): MigrationChallenge

  methods: {
    CHALLENGE_PERIOD(): TransactionObject<string>

    MAX_UTXO(): TransactionObject<string>

    MAX_WITHDRAWAL(): TransactionObject<string>

    MINIMUM_STAKE(): TransactionObject<string>

    NULLIFIER_TREE_DEPTH(): TransactionObject<string>

    REF_DEPTH(): TransactionObject<string>

    UTXO_SUB_TREE_DEPTH(): TransactionObject<string>

    UTXO_SUB_TREE_SIZE(): TransactionObject<string>

    UTXO_TREE_DEPTH(): TransactionObject<string>

    WITHDRAWAL_SUB_TREE_DEPTH(): TransactionObject<string>

    WITHDRAWAL_SUB_TREE_SIZE(): TransactionObject<string>

    WITHDRAWAL_TREE_DEPTH(): TransactionObject<string>

    allowedMigrants(arg0: string): TransactionObject<boolean>

    committedDeposits(
      massDepositHash: string | number[],
    ): TransactionObject<string>

    finalizedUTXORoots(utxoRoot: string | number[]): TransactionObject<boolean>

    genesis(): TransactionObject<string>

    getVk(
      numOfInputs: number | string,
      numOfOutputs: number | string,
    ): TransactionObject<{
      alfa1: string[]
      beta2: string[][]
      gamma2: string[][]
      delta2: string[][]
      ic: string[][]
      0: string[]
      1: string[][]
      2: string[][]
      3: string[][]
      4: string[][]
    }>

    latest(): TransactionObject<string>

    massDepositId(): TransactionObject<string>

    migrations(migrationHash: string | number[]): TransactionObject<boolean>

    parentOf(header: string | number[]): TransactionObject<string>

    proposals(
      proposalId: string | number[],
    ): TransactionObject<{
      header: string
      challengeDue: string
      slashed: boolean
      0: string
      1: string
      2: boolean
    }>

    proposedBlocks(): TransactionObject<string>

    proposers(
      addr: string,
    ): TransactionObject<{
      stake: string
      reward: string
      exitAllowance: string
      0: string
      1: string
      2: string
    }>

    registeredERC20s(): TransactionObject<string[]>

    registeredERC721s(): TransactionObject<string[]>

    stagedDeposits(): TransactionObject<{
      merged: string
      fee: string
      0: string
      1: string
    }>

    stagedSize(): TransactionObject<string>

    utxoRootOf(header: string | number[]): TransactionObject<string>

    withdrawalRootOf(header: string | number[]): TransactionObject<string>

    withdrawn(leaf: string | number[]): TransactionObject<boolean>

    challengeDuplicatedDestination(
      destination: string,
      blockData: string | number[],
    ): TransactionObject<void>

    challengeTotalEth(
      migrationIndex: number | string,
      blockData: string | number[],
    ): TransactionObject<void>

    challengeMergedLeaves(
      migrationIndex: number | string,
      blockData: string | number[],
    ): TransactionObject<void>

    challengeMigrationFee(
      migrationIndex: number | string,
      blockData: string | number[],
    ): TransactionObject<void>

    challengeDuplicatedERC20Migration(
      migrationIndex: number | string,
      erc20Address: string,
      blockData: string | number[],
    ): TransactionObject<void>

    challengeERC20Amount(
      migrationIndex: number | string,
      erc20Index: number | string,
      blockData: string | number[],
    ): TransactionObject<void>

    challengeDuplicatedERC721Migration(
      migrationIndex: number | string,
      erc20Address: string,
      blockData: string | number[],
    ): TransactionObject<void>

    challengeNonFungibility(
      migrationIndex: number | string,
      erc721Index: number | string,
      tokenId: number | string,
      blockData: string | number[],
    ): TransactionObject<void>

    challengeNftExistence(
      migrationIndex: number | string,
      erc721Index: number | string,
      tokenId: number | string,
      blockData: string | number[],
    ): TransactionObject<void>
  }

  events: {
    allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter
  }
}
